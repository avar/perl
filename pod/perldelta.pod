=encoding utf8

=for release_engineer
* changelogged up to 26e1fc4
* the mauve module will not be part of the release, so it's not changelogged
yet. it also added some new api functions. those aren't covered either, as they
might go away again in case mauve gets rolled back for 5.13.5.

=head1 NAME

[ this is a template for a new perldelta file. Any text flagged as
XXX needs to be processed before release. ]

perldelta - what is new for perl v5.13.5

=head1 DESCRIPTION

This document describes differences between the 5.13.4 release and
the 5.13.5 release.

If you are upgrading from an earlier release such as 5.13.3, first read
L<perl5134delta>, which describes differences between 5.13.3 and
5.13.4.

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

XXX New core language features go here. Summarise user-visible core language
enhancements. Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

=head2 Adjacent pairs of nextstate opcodes are now optimized away

Previously, in code such as

    use constant DEBUG => 0;

    sub GAK {
        warn if DEBUG;
        print "stuff\n";
    }

the ops for C<warn if DEBUG;> would be folded to a C<null> op (C<ex-const>), but
the C<nextstate> op would remain, resulting in a runtime op dispatch of
C<nextstate>, C<nextstate>, ...

The execution of a sequence of C<nexstate> ops is indistinguishable from just
the last C<nextstate> op, so teach the peephole optimiser to eliminate the first
of a pair of C<nextstate> ops. (Except where the first carries a label, as
labels mustn't be eliminated by the optimiser, and label usage isn't
conclusively known at compile time.)

=head2 API function to parse statements

The C<parse_fullstmt> function has been added to allow parsing of a single
complete Perl statement. See L<perlapi> for details.

=head2 API functions for accessing the runtime hinthash

A new C API for introspecting the hinthash C<%^H> at runtime has been added. See
C<cop_hints_2hv>, C<cop_hints_fetchpvn>, C<cop_hints_fetchpvs>, and
C<cop_hints_fetchsv> in L<perlapi> for details.

=head2 C interface to C<caller()>

The C<caller_cx> function has been added as an XSUB-writer's equivalent of
C<caller()>. See L<perlapi> for details.

=head1 Security

XXX Any security-related notices go here.  In particular, any security
vulnerabilities closed should be noted here rather than in the
L</Selected Bug Fixes> section.

[ List each security issue as a =head2 entry ]

=head1 Incompatible Changes

=head2 Magic Variables Outside the Main Package

In previous versions of perl, magic variables like C<$!>, C<%SIG>, etc.  would
'leak' into other packages. So C<%foo::SIG> could be used to access signals,
C<${"foo::!"}> (with strict mode off) to access C's C<errno>, etc.

This was a bug, or an 'unintentional' feature, which caused various ill
effects, such as signal handlers being wiped when modules were loaded, etc.

This has been fixed (or the feature has been removed, depending on how you
see it).

=head2 Smart-matching against array slices

Previously, the following code resulted in a successful match:

    my @a = qw(a y0 z);
    my @b = qw(a x0 z);
    $a[0 .. $#b] ~~ @b;

This odd behaviour has now been fixed [perl #77468].

=head2 C API changes

The first argument of the C API function C<Perl_fetch_cop_label> has changed
from C<struct refcounted he *> to C<COP *>, to better insulate the user from
implementation details.

This API function was marked as "may change", and likely isn't in use outside
the core. (Neither an unpacked CPAN, nor Google's codesearch, finds any other
references to it.)

=head1 Deprecations

XXX Any deprecated features, syntax, modules etc. should be listed here.
In particular, deprecated modules should be listed here even if they are
listed as an updated module in the L</Modules and Pragmata> section.

=head2 Use of qw(...) as parentheses

Historically the parser fooled itself into thinking that C<qw(...)> literals
were always enclosed in parentheses, and as a result you could sometimes omit
parentheses around them:

    for $x qw(a b c) { ... }

The parser no longer lies to itself in this way.  Wrap the list literal in
parentheses, like:

    for $x (qw(a b c)) { ... }

=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here. There
may well be none in a stable release.

[ List each enhancement as a =item entry ]

=over 4

=item *

Scalars containing regular expressions now only allocate the part of the C<SV>
body they actually use, saving some space.

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>, which prints stub
entries to STDOUT.  Results can be pasted in place of the '=head2' entries
below.  A paragraph summary for important changes should then be added by hand.
In an ideal world, dual-life modules would have a F<Changes> file that could be
cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

C<blib> has been upgraded from version 1.05 to 1.06.

=item *

C<bignum>, C<bigint>, and C<bigrat> have been upgraded from version 0.23 to
0.24.

=item *

C<warnings> has been upgraded from version 1.10 to 1.11.

C<warnings::register> has been upgraded from version 1.01 to 1.02.

It is now possible to register warning categories other than the names of
packages using warnings::register.  See L<perllexwarn> for more information.

=item *

C<Data::Dumper> has been upgraded from version 2.126 to 2.128.

This fixes a crash when using custom sort functions that might cause the stack
to change.

=item *

C<Errno> has been upgraded from version 1.12 to 1.13.

On some platforms with unusual header files, like Win32/gcc using mingw64
headers, some constants which weren't actually error numbers have been exposed
by C<Errno>. This has been fixed (RT#77416).

=item *

C<ExtUtils::MakeMaker> has been upgraded from version 6.56 to 6.57_01.

=item *

C<Filter::Simple> has been upgraded from version 0.84 to 0.85.

=item *

C<Math::BigInt> has been upgraded from version 1.89_01 to 1.92.
C<Math::BigInt::Calc> has been upgraded from version 0.52 to 0.53.

This fixes incorrect results when computing binomial coefficients (RT#77640).

=item *

C<Math::BigInt::FastCalc> has been upgraded from version 0.19 to 0.21.

=item *

C<Module::CoreList> has been upgraded from version 2.37 to 2.38.

=item *

C<Tie::Hash> has been upgraded from version 1.03 to 1.04.

Calling C<< Tie::Hash->TIEHASH() >> used to loop forever. Now it C<croak>s.

=item *

C<Unicode::Collate> has been upgraded from version 0.56 to 0.59.

=item *

C<XSLoader> has been upgraded from version 0.10 to 0.11.

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

=head3 L<perlapi>

=over 4

=item *

Many of the optree construction functions are now documented.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here. Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

[ Within each section, list entries as a =item entry ]

=head2 New Diagnostics

XXX Newly added diagnostic messages go here

=over 4

=item *

Use of qw(...) as parentheses is deprecated

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

XXX

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perlbug> and F<xsubpp> go
here. Most of these are built within the directories F<utils> and F<x2p>.

[ List utility changes as a =head3 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head3 L<h2ph>

=over 4

=item *

The use of a deprecated C<goto> construct has been removed (RT#74404).

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as a =item entry ].

=over 4

=item *

XXX

=back

=head1 Testing

XXX Any significant changes to the testing of a freshly built perl should be
listed here.  Changes which create B<new> files in F<t/> go here as do any
large changes to the testing harness (e.g. when parallel testing was added).
Changes to existing files in F<t/> aren't worth summarising, although the bugs
that they represent may be covered elsewhere.

[ List each test improvement as a =item entry ]

=over 4

=item *

A rare race condition in F<t/op/while_readdir.t> has been fixed, stopping it
from failing randomly when running tests in parallel.

=item *

The new F<t/op/leaky-magic.t> script tests that magic applied to variables in
the main packages does not affect other packages.

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as a =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not. These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms. This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item VMS

=over 4

=item *

Make PerlIOUnix_open honor default permissions on VMS.

When perlio became the default and unixio became the default bottom layer, the
most common path for creating files from Perl became C<PerlIOUnix_open>, which
has always explicitly used C<0666> as the permission mask.

To avoid this, C<0777> is now passed as the permissions to C<open()>. In the VMS
CRTL, C<0777> has a special meaning over and above intersecting with the current
umask; specifically, it allows Unix syscalls to preserve native default
permissions.

=back

=back

=head1 Internal Changes

XXX Changes which affect the interface available to C<XS> code go here.
Other significant internal changes for future core maintainers should
be noted as well.

[ List each test improvement as a =item entry ]

=over 4

=item *

C<CALL_FPTR> and C<CPERLscope> have been removed deprecated.

Those are left from an old implementation of C<MULTIPLICITY> using C++ objects,
which has been removed in 5.8. Nowadays these macros do exactly nothing, so they
shouldn't be used anymore.

For compatibility, they are still defined for external C<XS> code. Only
extensions defining C<PERL_CORE> must be updated now.

=item *

C<lex_stuff_pvs()> has been added as a convenience macro wrapping
C<lex_stuff_pvn()> for literal strings.

=item *

The recursive part of the peephole optimizer is how hookable.

In addition to C<PL_peepp>, for hooking into the toplevel peephole optimizer, a
C<PL_rpeepp> is now available to hook into the optimizer recursing into
side-chains of the optree.

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarised here.
Bug fixes in files in F<ext/> and F<lib/> are best summarised in
L</Modules and Pragmata>.

[ List each fix as a =item entry ]

=over 4

=item *

A regression introduced in perl 5.12.0, making
C<< my $x = 3; $x = length(undef) >> result in C<$x> set to C<3> has been
fixed. C<$x> will now be C<undef>.

=item *

A fatal error in regular expressions when processing UTF-8 data has been fixed
(RT#75680).

=item *

An erroneous regular expression engine optimization, that caused regex verbs
like C<*COMMIT> to sometimes be ignored, has been removed.

=item *

The perl debugger now also works in taint mode (RT#76872).

=item *

Several memory leaks in cloning and freeing threaded perl interpreters have been
fixed (RT#77352).

=item *

A possible string corruption when doing regular expression matches on overloaded
objects has been fixed (RT#77084).

=item *

Magic applied to variables in the main package no longer affects other
packages. See L</Magic Variables Outside the Main Package>, above [perl #76138].

=item *

Opening a glob reference via C<< open $fh, ">", \*glob >> will no longer cause
the glob to be corrupted when the file handle is printed to. This would cause
perl to crash whenever the glob's contents were accessed [perl #77492].

=item *

The postincrement and postdecrement operators, C<++> and C<--> used to cause
leaks when being used on references. This has now been fixed.

=item *

A bug when replacing the glob of a loop variable within the loop has been
fixed [perl #21469]. This means the following code will no longer crash:

    for $x (...) {
        *x = *y;
    }

=item *

Perl would segfault if the undocumented C<Internals> functions that
used reference prototypes were called with the C<&foo()> syntax,
e.g. C<&Internals::SvREADONLY(undef)> [perl #77776].

These functions now call C<SvROK> on their arguments before
dereferencing them with C<SvRV>, and we test for this case in
F<t/lib/universal.t>.

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here. Any
tests that had to be C<TODO>ed for the release would be noted here, unless
they were specific to a particular platform (see below).

This is a list of some significant unfixed bugs, which are regressions
from either 5.XXX.XXX or 5.XXX.XXX.

[ List each fix as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX The list of people to thank goes here.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the B<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5-security-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details
on what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
