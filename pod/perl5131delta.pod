=encoding utf8

=head1 NAME

[ this is a template for a new perldelta file. Any text flagged as
XXX needs to be processed before release. ]

perldelta - what is new for perl v5.13.1

=head1 DESCRIPTION

This document describes differences between the 5.13.0 release and
the 5.13.1 release.

If you are upgrading from an earlier release such as 5.10, first read
L<perl5120delta>, which describes differences between 5.10 and
5.12.

=head1 Notice

XXX Any important notices here

=head1 Incompatible Changes

=head2 "C<\cI<X>>"

The backslash-c construct was designed as a way of specifying
non-printable characters, but there were no restrictions (on ASCII
platforms) on what the character following the C<c> could be.  Now, that
character must be one of the ASCII characters.

=head2 localised tied hashes, arrays and scalars are no longed tied

In the following:

    tie @a, ...;
    {
	local @a;
	# here, @a is a now a new, untied array
    }
    # here, @a refers again to the old, tied array

The new local array used to be made tied too, which was fairly pointless,
and has now been fixed. This fix could however potentially cause a change
in behaviour of some code.

=head1 Core Enhancements

XXX New core language features go here. Summarise user-visible core language
enhancements. Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

=head2 Exception Handling Reliability

Several changes have been made to the way C<die>, C<warn>, and C<$@>
behave, in order to make them more reliable and consistent.

When an exception is thrown inside an C<eval>, the exception is no
longer at risk of being clobbered by code running during unwinding
(e.g., destructors).  Previously, the exception was written into C<$@>
early in the throwing process, and would be overwritten if C<eval> was
used internally in the destructor for an object that had to be freed
while exiting from the outer C<eval>.  Now the exception is written
into C<$@> last thing before exiting the outer C<eval>, so the code
running immediately thereafter can rely on the value in C<$@> correctly
corresponding to that C<eval>.

Likewise, a C<local $@> inside an C<eval> will no longer clobber any
exception thrown in its scope.  Previously, the restoration of C<$@> upon
unwinding would overwrite any exception being thrown.  Now the exception
gets to the C<eval> anyway.  So C<local $@> is safe inside an C<eval>,
albeit of rather limited use.

Exceptions thrown from object destructors no longer modify the C<$@>
of the surrounding context.  (If the surrounding context was exception
unwinding, this used to be another way to clobber the exception being
thrown.  Due to the above change it no longer has that significance,
but there are other situations where C<$@> is significant.)  Previously
such an exception was sometimes emitted as a warning, and then either
string-appended to the surrounding C<$@> or completely replaced the
surrounding C<$@>, depending on whether that exception and the surrounding
C<$@> were strings or objects.  Now, an exception in this situation is
always emitted as a warning, leaving the surrounding C<$@> untouched.
In addition to object destructors, this also affects any function call
performed by XS code using the C<G_KEEPERR> flag.

C<$@> is also no longer used as an internal temporary variable when
preparing to C<die>.  Previously it was internally necessary to put
any exception object (any non-string exception) into C<$@> first,
before it could be used as an exception.  (The C API still offers the
old option, so an XS module might still clobber C<$@> in the old way.)
This change together with the foregoing means that, in various places,
C<$@> may be observed to contain its previously-assigned value, rather
than having been overwritten by recent exception-related activity.

Warnings for C<warn> can now be objects, in the same way as exceptions
for C<die>.  If an object-based warning gets the default handling,
of writing to standard error, it will of course still be stringified
along the way.  But a C<$SIG{__WARN__}> handler will now receive an
object-based warning as an object, where previously it was passed the
result of stringifying the object.

=head2 package block syntax

The package statement can now declare blocks to be in a given
package. With the new syntax C<package Foo { ... }> is equivalent to
the previously supported C<{ package Foo; ... }> form. See
L<perlfunc/"package NAMESPACE BLOCK"> for details.

Perl's developers consider this feature to be experimental. We may
remove it, amend it, or keep it as-is in Perl 5.16. Please submit
feedback on this feature, e.g. via the L<perlthanks> tool.

=head1 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not. These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>, which prints stub
entries to STDOUT.  Results can be pasted in place of the '=head2' entries
below.  A paragraph summary for important changes should then be added by hand.
In an ideal world, dual-life modules would have a F<Changes> file that could be
cribbed.

=head2 New Modules and Pragmata

=head2 Pragmata Changes

=head2 Updated Modules

=over

=item Perl 4 C<.pl> libraries

These historical libraries have been minimally modified to avoid using
C<$[>.  This is to prepare them for the deprecation of C<$[>.

=item C<B::Deparse>

A bug has been fixed when deparsing a nextstate op that has both a
change of package (relative to the previous nextstate), or a change of
C<%^H> or other state, and a label.  Previously the label was emitted
first, leading to syntactically invalid output because a label is not
permitted immediately before a package declaration, B<BEGIN> block,
or some other things.  Now the label is emitted last.

=back

=head2 Removed Modules and Pragmata

=head1 Utility Changes

XXX Changes to installed programs such as F<perlbug> and F<xsubpp> go
here. Most of these are built within the directories F<utils> and F<x2p>.

=over 4

=item F<XXX>

XXX

=back

=head1 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=over 4

=item L<XXX>

XXX

=back

=head1 Changes to Existing Documentation

XXX Changes which significantly change existing files in F<pod/> go here.
Any changes to F<pod/perldiag.pod> should go in L</New or Changed Diagnostics>.


=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here. There
may well be none in a stable release.

=over 4

=item *

XXX

=back

=head1 Installation and Configuration Improvements

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.

=head2 Configuration improvements

XXX

=head2 Compilation improvements

XXX

=head2 Platform Specific Changes

=over 4

=item XXX-some-platform

XXX

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarised here.
Bug fixes in files in F<ext/> and F<lib/> are best summarised in
L</Modules and Pragmata>.

=over 4

=item *

XXX

=back

=head1 New or Changed Diagnostics

XXX New or changed warnings emitted by the core's C<C> code go here.

=over 4

=item C<XXX>

XXX

=back

=head1 Changed Internals

XXX Changes which affect the interface available to C<XS> code go here.

=over 4

=item *

The protocol for unwinding the C stack at the last stage of a C<die>
has changed how it identifies the target stack frame.  This now uses
a separate variable C<PL_restartjmpenv>, where previously it relied on
the C<blk_eval.cur_top_env> pointer in the C<eval> context frame that
has nominally just been discarded.  This change means that code running
during various stages of Perl-level unwinding no longer needs to take
care to avoid destroying the ghost frame.

=item *

XXX

=back

=head1 New Tests

XXX Changes which create B<new> files in F<t/> go here. Changes to
existing files in F<t/> aren't worth summarising, although the bugs that
they represent may be.

=over 4

=item F<XXX>

XXX

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here. Any
tests that had to be C<TODO>ed for the release would be noted here, unless
they were specific to a particular platform (see below).

This is a list of some significant unfixed bugs, which are regressions
from either 5.XXX.XXX or 5.XXX.XXX.

=over 4

=item *

XXX

=back

=head1 Deprecations

XXX Add any new known deprecations here.

The following items are now deprecated.

=over 4

=item *

XXX

=back

=head1 Platform Specific Notes

XXX Any changes specific to a particular platform. VMS and Win32 are the usual
stars here. It's probably best to group changes under the same section layout
as the main perldelta

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX The list of people to thank goes here.


=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the B<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5-security-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details
on what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
